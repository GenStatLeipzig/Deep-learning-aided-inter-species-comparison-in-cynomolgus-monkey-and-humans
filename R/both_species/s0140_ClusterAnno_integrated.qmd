---
title: "azimuth 2nd"
format:
  html:
    df-print: paged
    fig-width: 16
    fig-height: 12
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: false
    standalone: true
    embed-resources: true
editor: source
execute:
  cache: false
  warning: false
editor_options:
  chunk_output_type: console
---

# INITITATE

```{r}
rm(list =ls())
.libPaths()

library(toolboxH)
library(Seurat)

library(here)
library(ggplot2)
library(scales)
library(ggthemes)
library(BiocParallel)
library(patchwork)
library(Azimuth)



library(future) #https://satijalab.org/celllines/archive/v3.0/future_vignette.html
options(future.globals.maxSize= 30*1024^3) # to prevent the error
future.seed=TRUE # to care for proper random seeds

# get available cores
ncores = future::availableCores()

ncores = 10
plan("multicore", workers = ncores)
initializeSkript()

knitr::opts_chunk$set(cache = F, warning = F, message = F)
```

### special functions
```{r}
ggplotSankey <- function(input, sort_by_frequency =T) {
  require(ggsankey)
  require(ggrepel)
  
  require(dplyr)
  sankey_gg_data = ggsankey::make_long(input, names(input))
  
  
  sankey_gg_data_dt = as.data.table(sankey_gg_data, keep.rownames = F)
  ordered = sankey_gg_data_dt[,.N, .(node, next_node)][order(is.na(next_node),-N, na.last = T)  ]
  # ordered2 = ordered[order(-node, -N)]
  
  # sankey_gg_data$next_node = factor(sankey_gg_data$next_node, levels = reihenfolge)
  NogpaletteReihe <-  c("#CB769E", "#DE639A", "#A85C85", "#0081AF", "#4F6D7A", "#7C6A0A", "#368F8B", "#246A73", "#5CC1BC", "#62C370", "#F7C548", "#F97E44", "#FB3640", "#B7245C", "#0D3B66", "#3E2F5B", "#B2675E", "#644536") %>% rev()
  
  
  if(sort_by_frequency ==T){
    sankey_gg_data$next_node = factor(sankey_gg_data$next_node, levels = unique(ordered$next_node) )
    sankey_gg_data$node = factor(sankey_gg_data$node, levels = unique(ordered$node))
  }
  p_sankey = ggplot(sankey_gg_data, aes(x = x, next_x = next_x,
                                        node = node, next_node = next_node,
                                        fill = factor(node), label = node)) +
    geom_sankey(flow.alpha = 0.6, node.color = alpha("grey55", 0.2), alpha = 0.4) +
    geom_sankey_text(size = 4, color = "black") +
    # scale_fill_manual(values = rep(NogpaletteReihe, 10) %>% sample()) +
    theme_sankey(base_size = 18) +
    labs(x = NULL) +
    theme(legend.position = "none",
          plot.title = element_text(hjust = .5),
          axis.text.x = element_text(color = "black"))
  
  
  
  p_sankey
}


doMarkerDotPlot <- function(seurat, marker_groups_peter,grouping_factor =  "predicted.celltype.l1_1st") {
  
  marker_groups2 = copy(marker_groups_peter)
  marker_groups2[, highmarker := markers]
  marker_groups2[, celltype2 := celltype]
  marker_groups = copy(marker_groups2)
  
  
  marker_groups2[, highmarker := str_trim(highmarker)]
  marker_groups2[,.N, celltype]
  marker_groups2[,.N, celltype2] %>% data.frame()
  
  
  
  
  # Create the base dotplot
  plot_data <- DotPlot(
    seurat,
    group.by = grouping_factor,
    
    features = unique(marker_groups2$highmarker %>% unique()),
    scale.by = "radius",
    scale = TRUE)
  
  # Extract the plot data
  plot_df <- plot_data$data %>% as.data.table(keep.rownames = T)
  plot_df[,.N, id]
  
  # Add grouping information
  marker_groups2[, .(highmarker, celltype2)] %>% unique() %>% .[ toolboxH::allDuplicatedEntries(highmarker)]
  plot_df2 = merge(plot_df, marker_groups2[, .(highmarker, group = celltype)] %>% unique(), by.x = 'features.plot', by.y = 'highmarker', all.x = T,allow.cartesian=TRUE )
  
  
  plot_df2[,group := factor(group, levels = unique(marker_groups$celltype))]
  
  unique(plot_df2$id) %>% dput()
  
  levels_l1 = c("B", 
                "CD4 T", "CD8 T","other T", "NK",  "Mono", "DC", "other")
  levels_l2 =  c("B intermediate", "B memory", "B naive","Plasmablast", "CD4 Naive", 
                 "CD4 Proliferating", "CD4 TCM", "CD4 TEM","CD4 CTL" , "CD8 Naive",  "CD8 Proliferating" , "CD8 TCM", 
                 "CD8 TEM", "Treg",  "dnT", "gdT","MAIT", "ILC",  "NK", "NK Proliferating", "NK_CD56bright"  , "CD14 Mono", "CD16 Mono", "HSPC",  "Platelet", "cDC1", 
                 "cDC2", "pDC")
  
  levels_l1_5 = c("B", "Plasmablast", 
                  "CD4 T",  "CD4 Proliferating", "CD8 T",
                  "CD8 Proliferating", "dnT", "gdT", "MAIT", "other T", "NK", "NK Proliferating", "Mono", "CD14 Mono", "CD16 Mono", "DC","Platelet" ,"other")
  
  
  
  if(all(plot_df2$id %in%  levels_l2))  plot_df2[,id := factor(id, levels =  levels_l2)] else if(all(plot_df2$id %in%  levels_l1))  plot_df2[,id := factor(id, levels =  levels_l1)] else if(all(plot_df2$id %in%  levels_l1_5))  plot_df2[,id := factor(id, levels =  levels_l1_5)] else  if(all(plot_df2$id %in%  levels_l2))  plot_df2[,id := factor(id, levels =  c(levels_l1_5, levels_l2, levels_l1, plot_df2$id) %>% unique())]
  
  
  
  # Create the modified plot
  markerplot = ggplot(plot_df2, aes(x = id, y = features.plot)) +
    geom_point(aes(size = pct.exp, color = avg.exp.scaled)) +
    scale_color_gradient(low = "lightgrey", high = "blue") +
    theme_classic() +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1),
      strip.background = element_blank(),
      strip.text = element_text(face = "bold", hjust = 0),  # Left-align strip text
      # strip.placement = "outside",                          # Place strips outside
      panel.spacing = unit(1, "lines")                   # Adjust space between facets
    )+
    facet_grid(. ~ group, switch = "x",scales = "free", space = "free") +
    labs(x = "Cell Type", y = "Genes",
         color = "Average Expression", size = "Percent Expressed") +
    coord_flip() + ggtitle(deparse(substitute(seurat)), subtitle = deparse(substitute(grouping_factor)))
  
  print(markerplot)
  markerplot
}

```
## LOAD



```{r}
anno_human2 = fread(here("analysisR/results/s0135_cellano_human_azimuth_2nd.txt.gz"))

anno_cyno_ortho2 = fread(here("analysisR/results/s0135_cellano_cyno_azimuth_2nd.txt.gz"))

seurat2 = readRDS(here("analysisR/results/s0130_merged_seurat2_integrated.rds"))
seurat2



```


```{r}
to_rename = grep("^predicted",names(seurat2@meta.data), value = T)
to_rename
setnames(seurat2@meta.data, to_rename, paste0(to_rename, "_1st"))

```


# recluster finer
```{r} 

seurat2 <- FindNeighbors(seurat2, reduction = "integrated.scvi", dims = 1:30)
seurat2 <- FindClusters(seurat2, resolution = 4, cluster.name = "scvi_clusters")
seurat2 <- RunUMAP(seurat2, reduction = "integrated.scvi", dims = 1:30, reduction.name = "umap.scvi")
```

# anno table
```{r}
anno_seurat2 = data.table(seurat2@meta.data, keep.rownames = T)

anno_seurat2[, predicted.celltype.l1.5a := anno_human2[match_hk(anno_seurat2$rn, anno_human2$rn), predicted.celltype.l1.5]]
anno_seurat2[, predicted.celltype.l1.5b := anno_cyno_ortho2[match_hk(anno_seurat2$rn, anno_cyno_ortho2$rn), predicted.celltype.l1.5]]
anno_seurat2[, predicted.celltype.l1.5 := ifelse(is.na(predicted.celltype.l1.5a), predicted.celltype.l1.5b, predicted.celltype.l1.5a)]

anno_seurat2[, predicted.celltype.l1.5scorea := anno_human2[match_hk(anno_seurat2$rn, anno_human2$rn), predicted.celltype.l1.5score]]
anno_seurat2[, predicted.celltype.l1.5scoreb := anno_cyno_ortho2[match_hk(anno_seurat2$rn, anno_cyno_ortho2$rn), predicted.celltype.l1.5score]]
anno_seurat2[, predicted.celltype.l1.5score := ifelse(is.na(predicted.celltype.l1.5scorea), predicted.celltype.l1.5scoreb, predicted.celltype.l1.5scorea)]

anno_seurat2[, predicted.celltype.l1.5a := NULL]
anno_seurat2[, predicted.celltype.l1.5b := NULL]

anno_seurat2[, predicted.celltype.l1.5scorea := NULL]
anno_seurat2[, predicted.celltype.l1.5scoreb := NULL]

```
# add also predicted 2nd l2, i.e. using species specific azimuth based on qced seurat
```{r}
anno_seurat2[, predicted.celltype.l2_2nda := anno_human2[match_hk(anno_seurat2$rn, anno_human2$rn), predicted.celltype.l2_2nd]]
anno_seurat2[, predicted.celltype.l2_2ndb := anno_cyno_ortho2[match_hk(anno_seurat2$rn, anno_cyno_ortho2$rn), predicted.celltype.l2_2nd]]
anno_seurat2[, predicted.celltype.l2_2nd := ifelse(is.na(predicted.celltype.l2_2nda), predicted.celltype.l2_2ndb, predicted.celltype.l2_2nda)]

anno_seurat2[, predicted.celltype.l2.score_2nda := anno_human2[match_hk(anno_seurat2$rn, anno_human2$rn), predicted.celltype.l2.score_2nd]]
anno_seurat2[, predicted.celltype.l2.score_2ndb := anno_cyno_ortho2[match_hk(anno_seurat2$rn, anno_cyno_ortho2$rn), predicted.celltype.l2.score_2nd]]
anno_seurat2[, predicted.celltype.l2.score_2nd := ifelse(is.na(predicted.celltype.l2.score_2nda), predicted.celltype.l2.score_2ndb, predicted.celltype.l2.score_2nda)]

anno_seurat2[, predicted.celltype.l2_2nda := NULL]
anno_seurat2[, predicted.celltype.l2_2ndb := NULL]

anno_seurat2[, predicted.celltype.l2.score_2nda := NULL]
anno_seurat2[, predicted.celltype.l2.score_2ndb := NULL]

anno_seurat2[, .N, .(predicted.celltype.l2_2nd)] %>% data.frame()
```


# add also predicted 2nd l1, i.e. using species specific azimuth based on qced seurat
```{r}
anno_seurat2[, predicted.celltype.l1_2nda := anno_human2[match_hk(anno_seurat2$rn, anno_human2$rn), predicted.celltype.l1_2nd]]
anno_seurat2[, predicted.celltype.l1_2ndb := anno_cyno_ortho2[match_hk(anno_seurat2$rn, anno_cyno_ortho2$rn), predicted.celltype.l1_2nd]]
anno_seurat2[, predicted.celltype.l1_2nd := ifelse(is.na(predicted.celltype.l1_2nda), predicted.celltype.l1_2ndb, predicted.celltype.l1_2nda)]

anno_seurat2[, predicted.celltype.l1.score_2nda := anno_human2[match_hk(anno_seurat2$rn, anno_human2$rn), predicted.celltype.l1.score_2nd]]
anno_seurat2[, predicted.celltype.l1.score_2ndb := anno_cyno_ortho2[match_hk(anno_seurat2$rn, anno_cyno_ortho2$rn), predicted.celltype.l1.score_2nd]]
anno_seurat2[, predicted.celltype.l1.score_2nd := ifelse(is.na(predicted.celltype.l1.score_2nda), predicted.celltype.l1.score_2ndb, predicted.celltype.l1.score_2nda)]

anno_seurat2[, predicted.celltype.l1_2nda := NULL]
anno_seurat2[, predicted.celltype.l1_2ndb := NULL]

anno_seurat2[, predicted.celltype.l1.score_2nda := NULL]
anno_seurat2[, predicted.celltype.l1.score_2ndb := NULL]

anno_seurat2[, .N, .(predicted.celltype.l1_2nd)] %>% data.frame()
```



# Majority vote
```{r}



anno_seurat2[,  cluster_azimut1_5_scanvi := (table(predicted.celltype.l1.5) %>% sort( decreasing = T) %>% names())[1], by = .(scvi_clusters)]

## add NK and NK prolif unified
anno_seurat2[,  cluster_azimut1_5_scanvi_nkuni := fifelse(grepl("^NK",cluster_azimut1_5_scanvi ), "NK", cluster_azimut1_5_scanvi)]
ggplotSankey(anno_seurat2[,.(cluster_azimut1_5_scanvi, cluster_azimut1_5_scanvi_nkuni)])



stopifnot(identical(colnames(seurat2), anno_seurat2$rn))
seurat2$cluster_azimut1_5_scanvi = anno_seurat2$cluster_azimut1_5_scanvi
seurat2$cluster_azimut1_5_scanvi_nkuni = anno_seurat2$cluster_azimut1_5_scanvi_nkuni
# seurat2$cluster_azimut1_5_harmony = anno_seurat2$cluster_azimut1_5_harmony
seurat2$predicted.celltype.l1.5 = anno_seurat2$predicted.celltype.l1.5
seurat2$predicted.celltype.l1.5score = anno_seurat2$predicted.celltype.l1.5score

seurat2$predicted.celltype.l2_2nd = anno_seurat2$predicted.celltype.l2_2nd
seurat2$predicted.celltype.l1_2nd = anno_seurat2$predicted.celltype.l1_2nd

``` 


```{r}

anno_seurat2[, N_celltype := .N, .(predicted.celltype.l1.5, timepoint, species)]

anno_seurat2[, percent_homologue_cells := sum(cluster_azimut1_5_scanvi==predicted.celltype.l1.5)/.N, .(cluster_azimut1_5_scanvi)]
anno_seurat2[,.(percent_homologue_cells, cluster_azimut1_5_scanvi)] %>% unique() %>% .[order(percent_homologue_cells)] %>% data.frame()

anno_seurat2[, percent_homologue_cluster := sum(cluster_azimut1_5_scanvi==predicted.celltype.l1.5)/.N, .(scvi_clusters)]
anno_seurat2[,.(percent_homologue_cluster, cluster_azimut1_5_scanvi)] %>% unique() %>% .[order(percent_homologue_cluster)] %>% data.frame()


anno_seurat2[, cluster_azimut1_5_scanvi_plusprolif := ifelse(grepl("Proliferating", predicted.celltype.l1.5), predicted.celltype.l1.5, cluster_azimut1_5_scanvi)]

```


```{r}

seurat2$cluster_azimut1_5_scanvi_plusprolif = anno_seurat2$cluster_azimut1_5_scanvi_plusprolif

```


# save

```{r}
fwrite(anno_seurat2[,.(rn, species, timepoint, individual, predicted.celltype.l1.5, run10x, cluster_azimut1_5_scanvi , scvi_clusters, predicted.celltype.l1.5, predicted.celltype.l1.5score )], here("analysisR/results/s0140_clusteranno_scvi.txt.gz"))

fwrite(anno_seurat2[,.(rn, species, timepoint, individual, predicted.celltype.l1.5, run10x, cluster_azimut1_5_scanvi , scvi_clusters, predicted.celltype.l1.5, predicted.celltype.l1.5score )], here("analysisR/results_GIT/s0140_clusteranno_scvi.txt.gz"))

```

```{r rdssave}

saveRDS(seurat2,file =  here("analysisR/results/s0140_seurat2.rds"))
```

# finalize
```{r}
finalizeSkript()
```
